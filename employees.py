"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Guru Shreyas Potta and Ray Arcand, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.
  

UT EID 1: gp23568
UT EID 2: ra42693
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        '''Making the "name" variable read-only'''
        return self.__name

    @property
    def manager(self):
        '''Making the "manager" variable read-only'''
        return self.__manager

    @property
    def performance(self):
        '''Getting the value of performance'''
        return self._performance

    @property
    def happiness(self):
        '''Getting the value of happiness'''
        return self._happiness

    @property
    def salary(self):
        '''Getting the value of salary'''
        return self._salary

    @performance.setter
    def performance(self, value):
        '''Setting the value of performance'''
        self._performance = value
        if PERCENTAGE_MIN > value:
            self._performance = 0
        elif PERCENTAGE_MAX < value:
            self._performance = 100

    @happiness.setter
    def happiness(self, value):
        '''Setting the value of happiness'''
        self._happiness = value
        if PERCENTAGE_MIN > value:
            self._happiness = 0
        elif PERCENTAGE_MAX < value:
            self._happiness = 100

    @salary.setter
    def salary(self, value):
        '''Setting the value of salary'''
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = value

    @abstractmethod
    def work(self):
        '''This method is intended to simulate 1 hour of work.'''
        # pass

    def interact(self, other):
        '''This method is intended to simulate 1 hour of work.'''
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        '''Simulates the employeeâ€™s daily expenses by reducing their happiness and savings.'''
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        '''To string method'''
        return (
            f"{self.name}\n"
            f"\tSalary: ${self.salary}\n"
            f"\tSavings: ${self.savings}\n"
            f"\tHappiness: {self.happiness}%\n"
            f"\tPerformance: {self.performance}%"
        )

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        '''Simulates 1 hour of work for the manager.'''
        change = random.randint(-5,5)
        self.performance += change
        if change <= 0:
            self.happiness -= 1
            for key in self.relationships:
                self.relationships[key] -= 1
        elif change > 0:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        '''Simulates 1 hour of work for the TemporaryEmployee.'''
        change = random.randint(-15,15)
        self.performance += change
        if change <= 0:
            self.happiness -= 2
        elif change > 0:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if self.manager is other:
            if other.happiness > HAPPINESS_THRESHOLD:
                if self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.salary //= 2
                self.happiness -= 5
        if self.salary <= 0:
            self.is_employed = False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        '''Simulates 1 hour of work for the permanent employee.'''
        change = random.randint(-10,10)
        self.performance += change
        if change >= 0:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if self.manager is other:
            if other.happiness > HAPPINESS_THRESHOLD:
                if self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.happiness -= 1
